{"version":3,"sources":["Header.js","CurrentWeather.js","HourlyWeather.js","DailyWeather.js","Weather.js","service/service.js","database/database.js","AreaSearch.js","MainPage.js","Footer.js","App.js","index.js"],"names":["Header","className","CurrentWeather","data","timezone","backgroundChange","sec","dt","timestr","Date","toLocaleDateString","month","day","timeZone","sunrise","sunset","weather","description","src","icon","Math","round","temp","humidity","HourlyWeather","sixHourData","slice","getTime","value","toLocaleTimeString","hour","hour12","sixHourDataUI","map","i","DailyWeather","date","option","sunriseSec","sunsetSec","getDate","minute","dailyDataUI","min","max","Weather","selectedPage","apiFilter","lat","lon","results","useState","apiData","setApiData","apiUrl","useEffect","axios","get","then","console","log","GetWeatherApi","current","hourly","daily","database","label","AreaSearch","onChange","options","htmlFor","name","id","MainPage","setSelectedPage","setApiFilter","selectedCityName","setSelectedCityName","setLat","setLon","setTimeZone","categories","pageSelect","event","selected","currentTarget","selector","selectedCity","forEach","val","onClick","Footer","App","dayOrNight","setDayOrNight","currenttime","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33c1ad62.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return <div className=\"text-yellow-400 text-6xl\">Weather</div>;\n}\n\nexport default Header;\n","import React, { useEffect } from 'react';\n/* eslint-disable react/prop-types */\nfunction CurrentWeather({ data, timezone, backgroundChange }) {\n    // useEffect(() => {\n    //     backgroundChange(data.dt, data.sunrise, data.sunset);\n    // }, [data.dt]);\n    if (data) {\n        const sec = data.dt;\n        const date = new Date(sec * 1000);\n\n        const timestr = date.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone,\n        });\n        backgroundChange(data.dt, data.sunrise, data.sunset);\n\n        return (\n            <div>\n                <p>Current Weather</p>\n                <p>{timestr}</p>\n                <p>{data.weather[0].description}</p>\n                <img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} />\n                <p>{Math.round(data.temp)}F</p>\n                <p>{data.humidity}%</p>\n            </div>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default CurrentWeather;\n","import React from 'react';\n/* eslint-disable react/prop-types */\n\nfunction HourlyWeather({ data, timezone, backgroundChange }) {\n    if (data) {\n        const sixHourData = data.slice(0, 6);\n        const sec = data[0].dt;\n        const date = new Date(sec * 1000);\n        const timestr = date.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone,\n        });\n        const getTime = (value) => {\n            const date = new Date(value * 1000);\n            const time = date.toLocaleTimeString('en-US', {\n                hour: 'numeric',\n                hour12: true,\n                timeZone: timezone,\n            });\n            return time;\n        };\n        const sixHourDataUI = sixHourData.map((value, i) => {\n            return (\n                <div key={i}>\n                    <p>{getTime(value.dt)}</p>\n                    <p>{value.weather[0].description}</p>\n                    <img src={`http://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`} />\n                    <p>{Math.round(value.temp)}F</p>\n                    <p>{value.humidity}%</p>\n                </div>\n            );\n        });\n        backgroundChange(data[0].dt, data[0].sunrise, data[0].sunset);\n\n        return (\n            <div>\n                <p>Hourly Weather</p>\n                <p>{timestr}</p>\n                {sixHourDataUI}\n            </div>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default HourlyWeather;\n\n// const data = [\n//         {\n//             dt: 1628190000,\n//             temp: 84.96,\n//             feels_like: 86.16,\n//             pressure: 1013,\n//             humidity: 49,\n//             dew_point: 63.66,\n//             uvi: 10.46,\n//             clouds: 1,\n//             visibility: 10000,\n//             wind_speed: 8.75,\n//             wind_deg: 239,\n//             wind_gust: 6.33,\n//             weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//             pop: 0,\n//         },\n//         {\n//             dt: 1628193600,\n//             temp: 84.94,\n//             feels_like: 86.63,\n//             pressure: 1013,\n//             humidity: 51,\n//             dew_point: 64.8,\n//             uvi: 11.08,\n//             clouds: 1,\n//             visibility: 10000,\n//             wind_speed: 9.57,\n//             wind_deg: 230,\n//             wind_gust: 6.91,\n//             weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//             pop: 0,\n//         },\n//         {\n//             dt: 1628197200,\n//             temp: 85.19,\n//             feels_like: 86.23,\n//             pressure: 1013,\n//             humidity: 48,\n//             dew_point: 63.3,\n//             uvi: 10.15,\n//             clouds: 1,\n//             visibility: 10000,\n//             wind_speed: 9.53,\n//             wind_deg: 231,\n//             wind_gust: 7.67,\n//             weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//             pop: 0,\n//         },\n//     ];\n\n// time + i > 23 ? (\n//     <p>`${time + i - 24}AM`</p>\n// ) : 12 <= time + i <= 23 ? (\n//     <p>`${time + i - 12}PM`</p>\n// ) : (\n//     <p>`${time + i}AM`</p>\n// );\n","import React from 'react';\n/* eslint-disable react/prop-types */\n\nfunction DailyWeather({ data, timezone, backgroundChange, date }) {\n    if (data) {\n        const option = {\n            hour: 'numeric',\n            // minute: '2-digit',\n            hour12: false,\n            timeZone: timezone,\n        };\n        const sec = data[0].dt;\n        const date = new Date(sec * 1000).toLocaleTimeString('en-US', option);\n        const sunriseSec = data[0].sunrise;\n        const sunrise = new Date(sunriseSec * 1000).toLocaleTimeString('en-US', option);\n        const sunsetSec = data[0].sunset;\n        const sunset = new Date(sunsetSec * 1000).toLocaleTimeString('en-US', option);\n\n        // backgroundChange(date, sunrise, sunset);\n\n        const getDate = (value) => {\n            const date = new Date(value * 1000);\n            const day = date.toLocaleDateString('en-US', {\n                month: 'long',\n                day: 'numeric',\n                timeZone: timezone,\n            });\n            return day;\n        };\n        const getTime = (value) => {\n            const date = new Date(value * 1000);\n            const time = date.toLocaleTimeString('en-US', {\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: true,\n                timeZone: timezone,\n            });\n            return time;\n        };\n\n        const dailyDataUI = data.map((value, i) => {\n            return (\n                <div key={i}>\n                    <p>{getDate(value.dt)}</p>\n                    <p>{value.weather[0].description}</p>\n                    <img src={`http://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`} />\n                    <p>MIN: {Math.round(value.temp.min)}F</p>\n                    <p>MAX: {Math.round(value.temp.max)}F</p>\n                    <p>Sunrise: {getTime(value.sunrise)}</p>\n                    <p>Sunset: {getTime(value.sunset)}</p>\n                    <p>{value.humidity}%</p>\n                </div>\n            );\n        });\n        backgroundChange(date.dt, data[0].sunrise, data[0].sunset);\n\n        return (\n            <div>\n                <p>DailyWeather</p>\n                {dailyDataUI}\n            </div>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default DailyWeather;\n\n// const data = [\n//     {\n//         dt: 1628190000,\n//         sunrise: 1628168847,\n//         sunset: 1628218222,\n//         moonrise: 1628158200,\n//         moonset: 1628212260,\n//         moon_phase: 0.91,\n//         temp: { day: 85.01, min: 70.97, max: 85.78, night: 76.42, eve: 84.72, morn: 70.97 },\n//         feels_like: { day: 86.23, night: 76.21, eve: 83.53, morn: 70.97 },\n//         pressure: 1013,\n//         humidity: 49,\n//         dew_point: 63.72,\n//         wind_speed: 9.57,\n//         wind_deg: 230,\n//         wind_gust: 7.67,\n//         weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//         clouds: 1,\n//         pop: 0,\n//         uvi: 11.08,\n//     },\n//     {\n//         dt: 1628276400,\n//         sunrise: 1628255291,\n//         sunset: 1628304566,\n//         moonrise: 1628247840,\n//         moonset: 1628301600,\n//         moon_phase: 0.94,\n//         temp: { day: 86.16, min: 72.01, max: 88.14, night: 72.32, eve: 83.1, morn: 72.1 },\n//         feels_like: { day: 84.51, night: 71.98, eve: 81.81, morn: 71.78 },\n//         pressure: 1012,\n//         humidity: 34,\n//         dew_point: 53.1,\n//         wind_speed: 10.16,\n//         wind_deg: 170,\n//         wind_gust: 8.23,\n//         weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//         clouds: 5,\n//         pop: 0,\n//         uvi: 10.89,\n//     },\n//     {\n//         dt: 1628362800,\n//         sunrise: 1628341736,\n//         sunset: 1628390908,\n//         moonrise: 1628337780,\n//         moonset: 1628390640,\n//         moon_phase: 0.97,\n//         temp: { day: 84.22, min: 69.24, max: 86.81, night: 71.91, eve: 82.18, morn: 69.24 },\n//         feels_like: { day: 82.65, night: 71.47, eve: 81.27, morn: 68.68 },\n//         pressure: 1013,\n//         humidity: 34,\n//         dew_point: 51.08,\n//         wind_speed: 10.18,\n//         wind_deg: 187,\n//         wind_gust: 7.34,\n//         weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//         clouds: 0,\n//         pop: 0,\n//         uvi: 10.88,\n//     },\n// ];\n","import React from 'react';\nimport CurrentWeather from './CurrentWeather';\nimport HourlyWeather from './HourlyWeather';\nimport DailyWeather from './DailyWeather';\nimport { GetWeatherApi } from './service/service';\n/* eslint-disable react/prop-types */\nfunction Weather({ selectedPage, apiFilter, lat, lon, timezone, backgroundChange }) {\n    const results = GetWeatherApi(apiFilter, lat, lon);\n    if (results.current || results.hourly || results.daily) {\n        // backgroundChange(results.current.dt, results.current.sunrise, results.current.sunset);\n        if (selectedPage === 'current') {\n            return (\n                <CurrentWeather\n                    data={results.current}\n                    timezone={results.timezone}\n                    backgroundChange={backgroundChange}\n                />\n            );\n        } else if (selectedPage === 'hourly') {\n            return (\n                <HourlyWeather data={results.hourly} timezone={results.timezone} backgroundChange={backgroundChange} />\n            );\n        } else if (selectedPage === 'daily') {\n            return (\n                <DailyWeather\n                    data={results.daily}\n                    timezone={results.timezone}\n                    backgroundChange={backgroundChange}\n                    date={results.current}\n                />\n            );\n        }\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default Weather;\n","import axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nexport function GetWeatherApi(apiFilter, lat, lon) {\n    const [apiData, setApiData] = useState({});\n    const apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=${apiFilter}&units=imperial&appid=0f4895c08c6b38a4ddbee7eb8e8f71e3`;\n    useEffect(() => {\n        axios.get(apiUrl).then(({ data }) => {\n            setApiData(data);\n            console.log(data);\n        });\n    }, [apiUrl]);\n    return apiData;\n}\n","export const database = [\n    {\n        label: 'Los Angeles',\n        value: 'losAngeles',\n        lat: 34.05,\n        lon: -118.24,\n        timezone: 'America/Los_Angeles',\n    },\n    {\n        label: 'New York',\n        value: 'newYork',\n        lat: 40.71,\n        lon: -74.01,\n        timezone: 'America/New_York',\n    },\n    {\n        label: 'Tokyo',\n        value: 'tokyo',\n        lat: 35.68,\n        lon: 139.65,\n        timezone: 'Japan',\n    },\n    {\n        label: 'London',\n        value: 'london',\n        lat: 51.51,\n        lon: -0.13,\n        timezone: 'Europe/London',\n    },\n];\n","import React from 'react';\nimport { database } from './database/database';\n/* eslint-disable react/prop-types */\n\nfunction AreaSearch({ onChange }) {\n    const options = database.map((value, i) => {\n        return (\n            <option value={value.value} key={i}>\n                {value.label}\n            </option>\n        );\n    });\n    return (\n        <div>\n            <label htmlFor=\"city\">Select Area: </label>\n            <select name=\"city\" id=\"city\" onChange={onChange}>\n                {options}\n            </select>\n        </div>\n    );\n}\n\nexport default AreaSearch;\n","import React, { useState } from 'react';\nimport Weather from './Weather';\nimport AreaSearch from './AreaSearch';\nimport { database } from './database/database';\n\nfunction MainPage({ backgroundChange }) {\n    const [selectedPage, setSelectedPage] = useState('current');\n    const [apiFilter, setApiFilter] = useState('minutely,hourly,daily,alerts');\n    const [selectedCityName, setSelectedCityName] = useState(database[0].label);\n    const [lat, setLat] = useState(database[0].lat);\n    const [lon, setLon] = useState(database[0].lon);\n    const [timezone, setTimeZone] = useState(database[0].timezone);\n\n    const categories = {\n        current: 'minutely,hourly,daily,alerts',\n        hourly: 'minutely,current,daily,alerts',\n        daily: 'minutely,hourly,current,alerts',\n    };\n\n    const pageSelect = (event) => {\n        const selected = event.currentTarget.value;\n        setSelectedPage(selected);\n        setApiFilter(\n            selected === 'current' ? categories.current : selected === 'hourly' ? categories.hourly : categories.daily\n        );\n    };\n\n    const getCity = (event) => {\n        const selectedCity = event.currentTarget.value;\n        database.forEach((val) => {\n            if (val.value === selectedCity) {\n                setSelectedCityName(val.label);\n                setLat(val.lat);\n                setLon(val.lon);\n                setTimeZone(val.timezone);\n            }\n        });\n        // console.log(lat, lon);\n    };\n\n    return (\n        <div>\n            <AreaSearch selector={database} onChange={getCity} />\n            <button onClick={pageSelect} value=\"current\">\n                Today\n            </button>\n            <button onClick={pageSelect} value=\"hourly\">\n                Hourly\n            </button>\n            <button onClick={pageSelect} value=\"daily\">\n                Daily\n            </button>\n            <p>{selectedCityName}</p>\n            <Weather\n                selectedPage={selectedPage}\n                apiFilter={apiFilter}\n                lat={lat}\n                lon={lon}\n                timezone={timezone}\n                backgroundChange={backgroundChange}\n            />\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from 'react';\n\nfunction Footer() {\n    return <div>Footer</div>;\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport Header from './Header';\nimport MainPage from './MainPage';\nimport Footer from './Footer';\n\nfunction App() {\n    const [dayOrNight, setDayOrNight] = useState();\n\n    const backgroundChange = (currenttime, sunrise, sunset) => {\n        if (currenttime - sunrise > 0 && currenttime - sunset < 0) {\n            console.log('daytime');\n            setDayOrNight('day');\n        } else {\n            console.log('nighttime');\n            setDayOrNight('night');\n        }\n    };\n\n    return (\n        <div className=\"bg-blue-500\">\n            <Header className={dayOrNight} />\n            <MainPage backgroundChange={backgroundChange} />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}