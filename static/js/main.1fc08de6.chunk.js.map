{"version":3,"sources":["Header.js","CurrentWeather.js","HourlyWeather.js","DailyWeather.js","Weather.js","service/service.js","database/database.js","AreaSearch.js","MainPage.js","Footer.js","App.js","index.js"],"names":["Header","className","CurrentWeather","data","timezone","backgroundChange","sec","dt","timestr","Date","toLocaleDateString","month","day","timeZone","getTime","value","toLocaleTimeString","hour","minute","hour12","sunrise","sunset","src","weather","icon","Math","round","temp","description","humidity","HourlyWeather","backgroundChangeforHourly","sixHourData","slice","sixHourDataUI","map","i","DailyWeather","date","option","sunriseSec","sunsetSec","getDate","dailyDataUI","min","max","Weather","selectedPage","apiFilter","lat","lon","results","useState","apiData","setApiData","apiUrl","useEffect","axios","get","then","console","log","GetWeatherApi","current","hourly","daily","database","label","AreaSearch","onChange","options","htmlFor","name","id","MainPage","setSelectedPage","setApiFilter","setSelectedCityName","setLat","setLon","setTimeZone","categories","pageSelect","event","selected","currentTarget","selector","selectedCity","forEach","val","onClick","Footer","App","dayOrNight","setDayOrNight","style","backgroundAttachment","backgroundPosition","currenttime","test","ReactDOM","render","document","getElementById"],"mappings":"+KAMeA,MAJf,WACI,OAAO,qBAAKC,UAAU,yEAAf,sBCiEIC,MAlEf,YAA+D,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,iBAItC,GAAIF,EAAM,CACN,IAAMG,EAAMH,EAAKI,GAGXC,EAFO,IAAIC,KAAW,IAANH,GAEDI,mBAAmB,QAAS,CAC7CC,MAAO,OACPC,IAAK,UACLC,SAAUT,IAGRU,EAAU,SAACC,GAQb,OAPa,IAAIN,KAAa,IAARM,GACJC,mBAAmB,QAAS,CAC1CC,KAAM,UACNC,OAAQ,UACRC,QAAQ,EACRN,SAAUT,KAOlB,OAHAC,EAAiBF,EAAKiB,QAASjB,EAAKkB,QAIhC,sBAAKpB,UAAU,aAAf,UACI,gDACA,sBAAKA,UAAU,uEAAf,UACI,mBAAGA,UAAU,4BAAb,SAA0CO,IAC1C,sBAAKP,UAAU,iBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,OAAf,SACI,qBACIqB,IAAG,2CAAsCnB,EAAKoB,QAAQ,GAAGC,KAAtD,WACHvB,UAAU,mBAGlB,sBAAKA,UAAU,OAAf,UACI,oBAAGA,UAAU,WAAb,UACKwB,KAAKC,MAAMvB,EAAKwB,MACjB,sBAAM1B,UAAU,qBAAhB,sBAEJ,mBAAGA,UAAU,UAAb,SAAwBE,EAAKoB,QAAQ,GAAGK,oBAGhD,sBAAK3B,UAAU,2CAAf,UACI,mBAAGA,UAAU,UAAb,uBACA,oBAAGA,UAAU,UAAb,UAAwBE,EAAK0B,SAA7B,OACA,mBAAG5B,UAAU,UAAb,qBACA,mBAAGA,UAAU,UAAb,SAAwBa,EAAQX,EAAKiB,WACrC,mBAAGnB,UAAU,UAAb,sBACA,mBAAGA,UAAU,UAAb,SAAwBa,EAAQX,EAAKkB,mBAIjD,qBAAKpB,UAAU,iBAIvB,OAAO,8CCHA6B,MA1Df,YAAuE,IAA9C3B,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,SAAU2B,EAA6B,EAA7BA,0BACrC,GAAI5B,EAAM,CACN,IAAM6B,EAAc7B,EAAK8B,MAAM,EAAG,IAC5B3B,EAAMH,EAAK,GAAGI,GAEdC,EADO,IAAIC,KAAW,IAANH,GACDI,mBAAmB,QAAS,CAC7CC,MAAO,OACPC,IAAK,UACLC,SAAUT,IAERU,EAAU,SAACC,GAOb,OANa,IAAIN,KAAa,IAARM,GACJC,mBAAmB,QAAS,CAC1CC,KAAM,UACNE,QAAQ,EACRN,SAAUT,KAIZ8B,EAAgBF,EAAYG,KAAI,SAACpB,EAAOqB,GAC1C,OACI,sBAAanC,UAAU,oEAAvB,UACI,4BAAIa,EAAQC,EAAMR,MAClB,sBAAKN,UAAU,+BAAf,UACI,8BACI,qBAAKqB,IAAG,2CAAsCP,EAAMQ,QAAQ,GAAGC,KAAvD,eAEZ,sBAAKvB,UAAU,QAAf,UACI,oBACIA,UAAU,YADd,UAIKwB,KAAKC,MAAMX,EAAMY,MAClB,sBAAM1B,UAAU,oBAAhB,sBAEJ,mBAAGA,UAAU,2BAAb,SAAyCc,EAAMQ,QAAQ,GAAGK,oBAGlE,0CACA,8BAAIb,EAAMc,SAAV,SAlBMO,MAyBlB,OAFAL,EAA0B5B,EAAK,GAAGoB,QAAQ,GAAGC,MAGzC,sBAAKvB,UAAU,+BAAf,UACI,mBAAGA,UAAU,cAAb,4BACA,mBAAGA,UAAU,uBAAb,SAAqCO,IACrC,qBAAKP,UAAU,oCAAf,SAAoDiC,OAI5D,OAAO,8CCWAG,MAjEf,YAAmE,IAA3ClC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,iBACpC,GAD8D,EAARiC,KAClDnC,EAAM,CACN,IAAMoC,EAAS,CACXtB,KAAM,UAENE,QAAQ,EACRN,SAAUT,GAERE,EAAMH,EAAK,GAAGI,GAEdiC,GADO,IAAI/B,KAAW,IAANH,GAAYU,mBAAmB,QAASuB,GAC3CpC,EAAK,GAAGiB,SAErBqB,GADU,IAAIhC,KAAkB,IAAb+B,GAAmBxB,mBAAmB,QAASuB,GACtDpC,EAAK,GAAGkB,QAKpBqB,GAJS,IAAIjC,KAAiB,IAAZgC,GAAkBzB,mBAAmB,QAASuB,GAItD,SAACxB,GAOb,OANa,IAAIN,KAAa,IAARM,GACLL,mBAAmB,QAAS,CACzCC,MAAO,OACPC,IAAK,UACLC,SAAUT,MAIZU,EAAU,SAACC,GAQb,OAPa,IAAIN,KAAa,IAARM,GACJC,mBAAmB,QAAS,CAC1CC,KAAM,UACNC,OAAQ,UACRC,QAAQ,EACRN,SAAUT,KAKZuC,EAAcxC,EAAKgC,KAAI,SAACpB,EAAOqB,GACjC,OACI,gCACI,4BAAIM,EAAQ3B,EAAMR,MAClB,4BAAIQ,EAAMQ,QAAQ,GAAGK,cACrB,qBAAKN,IAAG,2CAAsCP,EAAMQ,QAAQ,GAAGC,KAAvD,aACR,sCAASC,KAAKC,MAAMX,EAAMY,KAAKiB,KAA/B,OACA,sCAASnB,KAAKC,MAAMX,EAAMY,KAAKkB,KAA/B,OACA,0CAAa/B,EAAQC,EAAMK,YAC3B,yCAAYN,EAAQC,EAAMM,WAC1B,8BAAIN,EAAMc,SAAV,SARMO,MAelB,OAHA/B,EAAiBF,EAAK,GAAGiB,QAASjB,EAAK,GAAGkB,QAItC,gCACI,6CACCsB,KAIT,OAAO,8C,iBC5BAG,MA9Bf,YAAsG,IAAnFC,EAAkF,EAAlFA,aAAcC,EAAoE,EAApEA,UAAWC,EAAyD,EAAzDA,IAAKC,EAAoD,EAApDA,IAAK7C,EAA+C,EAA/CA,iBAAkB0B,EAA6B,EAA7BA,0BAC9DoB,ECJH,SAAuBH,EAAWC,EAAKC,GAAM,IAAD,EACjBE,mBAAS,IADQ,mBACxCC,EADwC,KAC/BC,EAD+B,KAEzCC,EAAM,8DAA0DN,EAA1D,gBAAqEC,EAArE,oBAAoFF,EAApF,0DAOZ,OANAQ,qBAAU,WACNC,IAAMC,IAAIH,GAAQI,MAAK,YAAe,IAAZxD,EAAW,EAAXA,KACtBmD,EAAWnD,GACXyD,QAAQC,IAAI1D,QAEjB,CAACoD,IACGF,EDLSS,CAAcd,EAAWC,EAAKC,GAC9C,OAAIC,EAAQY,SAAWZ,EAAQa,QAAUb,EAAQc,MAExB,YAAjBlB,EAEI,cAAC,EAAD,CACI5C,KAAMgD,EAAQY,QACd3D,SAAU+C,EAAQ/C,SAClBC,iBAAkBA,IAGF,WAAjB0C,EAEH,cAAC,EAAD,CACI5C,KAAMgD,EAAQa,OACd5D,SAAU+C,EAAQ/C,SAClB2B,0BAA2BA,IAGX,UAAjBgB,EAEH,cAAC,EAAD,CAAc5C,KAAMgD,EAAQc,MAAO7D,SAAU+C,EAAQ/C,SAAUC,iBAAkBA,SAFlF,EAMA,8CEhCF6D,EAAW,CACpB,CACIC,MAAO,cACPpD,MAAO,aACPkC,IAAK,MACLC,KAAM,OACN9C,SAAU,uBAEd,CACI+D,MAAO,WACPpD,MAAO,UACPkC,IAAK,MACLC,KAAM,MACN9C,SAAU,oBAEd,CACI+D,MAAO,QACPpD,MAAO,QACPkC,IAAK,MACLC,IAAK,OACL9C,SAAU,SAEd,CACI+D,MAAO,SACPpD,MAAO,SACPkC,IAAK,MACLC,KAAM,IACN9C,SAAU,kBCHHgE,MApBf,YAAmC,IAAbC,EAAY,EAAZA,SACZC,EAAUJ,EAAS/B,KAAI,SAACpB,EAAOqB,GACjC,OACI,wBAAQrB,MAAOA,EAAMA,MAArB,SACKA,EAAMoD,OADsB/B,MAKzC,OACI,sBAAKnC,UAAU,yDAAf,UACI,wBAAOsE,QAAQ,OAAOtE,UAAU,0BAAhC,kBACU,OAEV,wBAAQA,UAAU,gDAAgDuE,KAAK,OAAOC,GAAG,OAAOJ,SAAUA,EAAlG,SACKC,QCgEFI,MA7Ef,YAAoE,IAAhDrE,EAA+C,EAA/CA,iBAAkB0B,EAA6B,EAA7BA,0BAA6B,EACvBqB,mBAAS,WADc,mBACxDL,EADwD,KAC1C4B,EAD0C,OAE7BvB,mBAAS,gCAFoB,mBAExDJ,EAFwD,KAE7C4B,EAF6C,OAGfxB,mBAASc,EAAS,GAAGC,OAHN,mBAGtCU,GAHsC,aAIzCzB,mBAASc,EAAS,GAAGjB,KAJoB,mBAIxDA,EAJwD,KAInD6B,EAJmD,OAKzC1B,mBAASc,EAAS,GAAGhB,KALoB,mBAKxDA,EALwD,KAKnD6B,EALmD,OAM/B3B,mBAASc,EAAS,GAAG9D,UANU,mBAMxDA,EANwD,KAM9C4E,EAN8C,KAQzDC,EACO,+BADPA,EAEM,gCAFNA,EAGK,iCAGLC,EAAa,SAACC,GAChB,IAAMC,EAAWD,EAAME,cAActE,MACrC4D,EAAgBS,GAChBR,EACiB,YAAbQ,EAAyBH,EAAkC,WAAbG,EAAwBH,EAAoBA,IAiBlG,OACI,gCACI,cAAC,EAAD,CAAYK,SAAUpB,EAAUG,SAfxB,SAACc,GACb,IAAMI,EAAeJ,EAAME,cAActE,MACzCmD,EAASsB,SAAQ,SAACC,GACVA,EAAI1E,QAAUwE,IACdV,EAAoBY,EAAItB,OACxBW,EAAOW,EAAIxC,KACX8B,EAAOU,EAAIvC,KACX8B,EAAYS,EAAIrF,iBASpB,sBAAKH,UAAU,8CAAf,UACI,wBACIyF,QAASR,EACTnE,MAAM,UACNd,UAAU,iGAHd,qBAOA,wBACIyF,QAASR,EACTnE,MAAM,SACNd,UAAU,uGAHd,oBAOA,wBACIyF,QAASR,EACTnE,MAAM,QACNd,UAAU,iGAHd,sBAQJ,qBAAKA,UAAU,aAAf,SAEI,cAAC,EAAD,CACI8C,aAAcA,EACdC,UAAWA,EACXC,IAAKA,EACLC,IAAKA,EACL9C,SAAUA,EACVC,iBAAkBA,EAClB0B,0BAA2BA,UCrEhC4D,MAJf,WACI,OAAO,0CCqDIC,MAnDf,WAAgB,IAAD,EACyBxC,qBADzB,mBACJyC,EADI,KACQC,EADR,KAmCX,OACI,sBACI7F,UACmB,UAAf4F,EACM,6CACA,2CAEVE,MAAO,CAAEC,qBAAsB,QAASC,mBAAoB,UANhE,UAQI,cAAC,EAAD,CAAQhG,UAAW4F,IACnB,cAAC,EAAD,CAAUxF,iBAtBO,SAACe,EAASC,GAC/B,IAAM6E,GAAc,IAAIzF,MAAOK,UAAY,IACvCoF,EAAc9E,EAAU,GAAK8E,EAAc7E,EAAS,GACpDuC,QAAQC,IAAI,WACZiC,EAAc,SAEdlC,QAAQC,IAAI,aACZiC,EAAc,UAElBlC,QAAQC,IAAIqC,EAAa9E,EAASC,IAagBU,0BAhCpB,SAACP,GAC3B,KAAK2E,KAAK3E,IACVoC,QAAQC,IAAI,WACZiC,EAAc,SAEdlC,QAAQC,IAAI,aACZiC,EAAc,aA2Bd,cAAC,EAAD,Q,MC9CZM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1fc08de6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return <div className=\"text-amber-400 text-6xl font-pacifico pt-8 pl-10 absolute top-0 left-0\">Weather</div>;\n}\n\nexport default Header;\n","import React, { useEffect } from 'react';\n/* eslint-disable react/prop-types */\nfunction CurrentWeather({ data, timezone, backgroundChange }) {\n    // useEffect(() => {\n    //     backgroundChange(data.dt, data.sunrise, data.sunset);\n    // }, [data.dt]);\n    if (data) {\n        const sec = data.dt;\n        const date = new Date(sec * 1000);\n\n        const timestr = date.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone,\n        });\n\n        const getTime = (value) => {\n            const date = new Date(value * 1000);\n            const time = date.toLocaleTimeString('en-US', {\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: true,\n                timeZone: timezone,\n            });\n            return time;\n        };\n        backgroundChange(data.sunrise, data.sunset);\n        // backgroundChange(data.weather[0].icon);\n\n        return (\n            <div className=\"font-baloo\">\n                <p>Current Weather</p>\n                <div className=\"bg-white bg-opacity-70 rounded-xl flex-col p-6 mt-10 w-400px mx-auto\">\n                    <p className=\"text-center text-2xl pb-4\">{timestr}</p>\n                    <div className=\"w-full mx-auto\">\n                        <div className=\"flex flex-row w-full\">\n                            <div className=\"w-48\">\n                                <img\n                                    src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\n                                    className=\"mx-auto w-28\"\n                                />\n                            </div>\n                            <div className=\"pt-5\">\n                                <p className=\"text-5xl\">\n                                    {Math.round(data.temp)}\n                                    <span className=\"text-3xl align-top\">&deg;F</span>\n                                </p>\n                                <p className=\"text-xl\">{data.weather[0].description}</p>\n                            </div>\n                        </div>\n                        <div className=\"grid grid-cols-2 mx-auto w-60 pt-4 pl-10\">\n                            <p className=\"text-lg\">Humidity:</p>\n                            <p className=\"text-lg\">{data.humidity}%</p>\n                            <p className=\"text-lg\">Sunset:</p>\n                            <p className=\"text-lg\">{getTime(data.sunrise)}</p>\n                            <p className=\"text-lg\">Sunrise:</p>\n                            <p className=\"text-lg\">{getTime(data.sunset)}</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"table-row\"></div>\n            </div>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default CurrentWeather;\n","import React from 'react';\n/* eslint-disable react/prop-types */\n\nfunction HourlyWeather({ data, timezone, backgroundChangeforHourly }) {\n    if (data) {\n        const sixHourData = data.slice(0, 12);\n        const sec = data[0].dt;\n        const date = new Date(sec * 1000);\n        const timestr = date.toLocaleDateString('en-US', {\n            month: 'long',\n            day: 'numeric',\n            timeZone: timezone,\n        });\n        const getTime = (value) => {\n            const date = new Date(value * 1000);\n            const time = date.toLocaleTimeString('en-US', {\n                hour: 'numeric',\n                hour12: true,\n                timeZone: timezone,\n            });\n            return time;\n        };\n        const sixHourDataUI = sixHourData.map((value, i) => {\n            return (\n                <div key={i} className=\"bg-white bg-opacity-70 rounded-xl flex-col p-6 mb-10 mx-auto w-60\">\n                    <p>{getTime(value.dt)}</p>\n                    <div className=\"flex flex-row justify-center\">\n                        <div>\n                            <img src={`http://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`} />\n                        </div>\n                        <div className=\"w-1/2\">\n                            <p\n                                className=\"text-2xl\n                        \"\n                            >\n                                {Math.round(value.temp)}\n                                <span className=\"text-lg align-top\">&deg;F</span>\n                            </p>\n                            <p className=\"leading-5 text-base pl-3\">{value.weather[0].description}</p>\n                        </div>\n                    </div>\n                    <p>Humidity:</p>\n                    <p>{value.humidity}%</p>\n                </div>\n            );\n        });\n        // backgroundChange(data[0].sunrise, data[0].sunset);\n        backgroundChangeforHourly(data[0].weather[0].icon);\n\n        return (\n            <div className=\"flex flex-col justify-center\">\n                <p className=\"text-center\">Hourly Weather</p>\n                <p className=\"text-center text-2xl\">{timestr}</p>\n                <div className=\"grid grid-cols-4 w-screen mx-auto\">{sixHourDataUI}</div>\n            </div>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default HourlyWeather;\n\n// const data = [\n//         {\n//             dt: 1628190000,\n//             temp: 84.96,\n//             feels_like: 86.16,\n//             pressure: 1013,\n//             humidity: 49,\n//             dew_point: 63.66,\n//             uvi: 10.46,\n//             clouds: 1,\n//             visibility: 10000,\n//             wind_speed: 8.75,\n//             wind_deg: 239,\n//             wind_gust: 6.33,\n//             weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//             pop: 0,\n//         },\n//         {\n//             dt: 1628193600,\n//             temp: 84.94,\n//             feels_like: 86.63,\n//             pressure: 1013,\n//             humidity: 51,\n//             dew_point: 64.8,\n//             uvi: 11.08,\n//             clouds: 1,\n//             visibility: 10000,\n//             wind_speed: 9.57,\n//             wind_deg: 230,\n//             wind_gust: 6.91,\n//             weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//             pop: 0,\n//         },\n//         {\n//             dt: 1628197200,\n//             temp: 85.19,\n//             feels_like: 86.23,\n//             pressure: 1013,\n//             humidity: 48,\n//             dew_point: 63.3,\n//             uvi: 10.15,\n//             clouds: 1,\n//             visibility: 10000,\n//             wind_speed: 9.53,\n//             wind_deg: 231,\n//             wind_gust: 7.67,\n//             weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//             pop: 0,\n//         },\n//     ];\n\n// time + i > 23 ? (\n//     <p>`${time + i - 24}AM`</p>\n// ) : 12 <= time + i <= 23 ? (\n//     <p>`${time + i - 12}PM`</p>\n// ) : (\n//     <p>`${time + i}AM`</p>\n// );\n","import React from 'react';\n/* eslint-disable react/prop-types */\n\nfunction DailyWeather({ data, timezone, backgroundChange, date }) {\n    if (data) {\n        const option = {\n            hour: 'numeric',\n            // minute: '2-digit',\n            hour12: false,\n            timeZone: timezone,\n        };\n        const sec = data[0].dt;\n        const date = new Date(sec * 1000).toLocaleTimeString('en-US', option);\n        const sunriseSec = data[0].sunrise;\n        const sunrise = new Date(sunriseSec * 1000).toLocaleTimeString('en-US', option);\n        const sunsetSec = data[0].sunset;\n        const sunset = new Date(sunsetSec * 1000).toLocaleTimeString('en-US', option);\n\n        // backgroundChange(date, sunrise, sunset);\n\n        const getDate = (value) => {\n            const date = new Date(value * 1000);\n            const day = date.toLocaleDateString('en-US', {\n                month: 'long',\n                day: 'numeric',\n                timeZone: timezone,\n            });\n            return day;\n        };\n        const getTime = (value) => {\n            const date = new Date(value * 1000);\n            const time = date.toLocaleTimeString('en-US', {\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: true,\n                timeZone: timezone,\n            });\n            return time;\n        };\n\n        const dailyDataUI = data.map((value, i) => {\n            return (\n                <div key={i}>\n                    <p>{getDate(value.dt)}</p>\n                    <p>{value.weather[0].description}</p>\n                    <img src={`http://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`} />\n                    <p>MIN: {Math.round(value.temp.min)}F</p>\n                    <p>MAX: {Math.round(value.temp.max)}F</p>\n                    <p>Sunrise: {getTime(value.sunrise)}</p>\n                    <p>Sunset: {getTime(value.sunset)}</p>\n                    <p>{value.humidity}%</p>\n                </div>\n            );\n        });\n        backgroundChange(data[0].sunrise, data[0].sunset);\n        // backgroundChange(data[0].weather[0].icon);\n\n        return (\n            <div>\n                <p>DailyWeather</p>\n                {dailyDataUI}\n            </div>\n        );\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default DailyWeather;\n\n// const data = [\n//     {\n//         dt: 1628190000,\n//         sunrise: 1628168847,\n//         sunset: 1628218222,\n//         moonrise: 1628158200,\n//         moonset: 1628212260,\n//         moon_phase: 0.91,\n//         temp: { day: 85.01, min: 70.97, max: 85.78, night: 76.42, eve: 84.72, morn: 70.97 },\n//         feels_like: { day: 86.23, night: 76.21, eve: 83.53, morn: 70.97 },\n//         pressure: 1013,\n//         humidity: 49,\n//         dew_point: 63.72,\n//         wind_speed: 9.57,\n//         wind_deg: 230,\n//         wind_gust: 7.67,\n//         weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//         clouds: 1,\n//         pop: 0,\n//         uvi: 11.08,\n//     },\n//     {\n//         dt: 1628276400,\n//         sunrise: 1628255291,\n//         sunset: 1628304566,\n//         moonrise: 1628247840,\n//         moonset: 1628301600,\n//         moon_phase: 0.94,\n//         temp: { day: 86.16, min: 72.01, max: 88.14, night: 72.32, eve: 83.1, morn: 72.1 },\n//         feels_like: { day: 84.51, night: 71.98, eve: 81.81, morn: 71.78 },\n//         pressure: 1012,\n//         humidity: 34,\n//         dew_point: 53.1,\n//         wind_speed: 10.16,\n//         wind_deg: 170,\n//         wind_gust: 8.23,\n//         weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//         clouds: 5,\n//         pop: 0,\n//         uvi: 10.89,\n//     },\n//     {\n//         dt: 1628362800,\n//         sunrise: 1628341736,\n//         sunset: 1628390908,\n//         moonrise: 1628337780,\n//         moonset: 1628390640,\n//         moon_phase: 0.97,\n//         temp: { day: 84.22, min: 69.24, max: 86.81, night: 71.91, eve: 82.18, morn: 69.24 },\n//         feels_like: { day: 82.65, night: 71.47, eve: 81.27, morn: 68.68 },\n//         pressure: 1013,\n//         humidity: 34,\n//         dew_point: 51.08,\n//         wind_speed: 10.18,\n//         wind_deg: 187,\n//         wind_gust: 7.34,\n//         weather: [{ id: 800, main: 'Clear', description: 'clear sky', icon: '01d' }],\n//         clouds: 0,\n//         pop: 0,\n//         uvi: 10.88,\n//     },\n// ];\n","import React from 'react';\nimport CurrentWeather from './CurrentWeather';\nimport HourlyWeather from './HourlyWeather';\nimport DailyWeather from './DailyWeather';\nimport { GetWeatherApi } from './service/service';\n/* eslint-disable react/prop-types */\nfunction Weather({ selectedPage, apiFilter, lat, lon, backgroundChange, backgroundChangeforHourly }) {\n    const results = GetWeatherApi(apiFilter, lat, lon);\n    if (results.current || results.hourly || results.daily) {\n        // backgroundChange(results.current.dt, results.current.sunrise, results.current.sunset);\n        if (selectedPage === 'current') {\n            return (\n                <CurrentWeather\n                    data={results.current}\n                    timezone={results.timezone}\n                    backgroundChange={backgroundChange}\n                />\n            );\n        } else if (selectedPage === 'hourly') {\n            return (\n                <HourlyWeather\n                    data={results.hourly}\n                    timezone={results.timezone}\n                    backgroundChangeforHourly={backgroundChangeforHourly}\n                />\n            );\n        } else if (selectedPage === 'daily') {\n            return (\n                <DailyWeather data={results.daily} timezone={results.timezone} backgroundChange={backgroundChange} />\n            );\n        }\n    } else {\n        return <div>Loading...</div>;\n    }\n}\n\nexport default Weather;\n","import axios from 'axios';\nimport { useState, useEffect } from 'react';\n\nexport function GetWeatherApi(apiFilter, lat, lon) {\n    const [apiData, setApiData] = useState({});\n    const apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=${apiFilter}&units=imperial&appid=0f4895c08c6b38a4ddbee7eb8e8f71e3`;\n    useEffect(() => {\n        axios.get(apiUrl).then(({ data }) => {\n            setApiData(data);\n            console.log(data);\n        });\n    }, [apiUrl]);\n    return apiData;\n}\n","export const database = [\n    {\n        label: 'Los Angeles',\n        value: 'losAngeles',\n        lat: 34.05,\n        lon: -118.24,\n        timezone: 'America/Los_Angeles',\n    },\n    {\n        label: 'New York',\n        value: 'newYork',\n        lat: 40.71,\n        lon: -74.01,\n        timezone: 'America/New_York',\n    },\n    {\n        label: 'Tokyo',\n        value: 'tokyo',\n        lat: 35.68,\n        lon: 139.65,\n        timezone: 'Japan',\n    },\n    {\n        label: 'London',\n        value: 'london',\n        lat: 51.51,\n        lon: -0.13,\n        timezone: 'Europe/London',\n    },\n];\n","import React from 'react';\nimport { database } from './database/database';\n/* eslint-disable react/prop-types */\n\nfunction AreaSearch({ onChange }) {\n    const options = database.map((value, i) => {\n        return (\n            <option value={value.value} key={i}>\n                {value.label}\n            </option>\n        );\n    });\n    return (\n        <div className=\"pt-16 pr-10 text-xl flex justify-end xl:justify-center\">\n            <label htmlFor=\"city\" className=\"text-white pr-2 text-lg\">\n                Area:{' '}\n            </label>\n            <select className=\"rounded bg-white bg-opacity-50 text-base px-3\" name=\"city\" id=\"city\" onChange={onChange}>\n                {options}\n            </select>\n        </div>\n    );\n}\n\nexport default AreaSearch;\n","import React, { useState } from 'react';\nimport Weather from './Weather';\nimport AreaSearch from './AreaSearch';\nimport { database } from './database/database';\n\nfunction MainPage({ backgroundChange, backgroundChangeforHourly }) {\n    const [selectedPage, setSelectedPage] = useState('current');\n    const [apiFilter, setApiFilter] = useState('minutely,hourly,daily,alerts');\n    const [selectedCityName, setSelectedCityName] = useState(database[0].label);\n    const [lat, setLat] = useState(database[0].lat);\n    const [lon, setLon] = useState(database[0].lon);\n    const [timezone, setTimeZone] = useState(database[0].timezone);\n\n    const categories = {\n        current: 'minutely,hourly,daily,alerts',\n        hourly: 'minutely,current,daily,alerts',\n        daily: 'minutely,hourly,current,alerts',\n    };\n\n    const pageSelect = (event) => {\n        const selected = event.currentTarget.value;\n        setSelectedPage(selected);\n        setApiFilter(\n            selected === 'current' ? categories.current : selected === 'hourly' ? categories.hourly : categories.daily\n        );\n    };\n\n    const getCity = (event) => {\n        const selectedCity = event.currentTarget.value;\n        database.forEach((val) => {\n            if (val.value === selectedCity) {\n                setSelectedCityName(val.label);\n                setLat(val.lat);\n                setLon(val.lon);\n                setTimeZone(val.timezone);\n            }\n        });\n        // console.log(lat, lon);\n    };\n\n    return (\n        <div>\n            <AreaSearch selector={database} onChange={getCity} />\n            <div className=\"w-screen mt-10 flex flex-row justify-center\">\n                <button\n                    onClick={pageSelect}\n                    value=\"current\"\n                    className=\"px-6 h-12 text-xl font-baloo bg-amber-400 bg-opacity-30 rounded hover:bg-opacity-60 transition\"\n                >\n                    Current\n                </button>\n                <button\n                    onClick={pageSelect}\n                    value=\"hourly\"\n                    className=\"px-6 h-12 mx-20 text-xl font-baloo bg-amber-400 bg-opacity-30 rounded hover:bg-opacity-60 transition\"\n                >\n                    Hourly\n                </button>\n                <button\n                    onClick={pageSelect}\n                    value=\"daily\"\n                    className=\"px-6 h-12 text-xl font-baloo bg-amber-400 bg-opacity-30 rounded hover:bg-opacity-60 transition\"\n                >\n                    Daily\n                </button>\n            </div>\n            <div className=\"font-baloo\">\n                {/* <p>{selectedCityName}</p> */}\n                <Weather\n                    selectedPage={selectedPage}\n                    apiFilter={apiFilter}\n                    lat={lat}\n                    lon={lon}\n                    timezone={timezone}\n                    backgroundChange={backgroundChange}\n                    backgroundChangeforHourly={backgroundChangeforHourly}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from 'react';\n\nfunction Footer() {\n    return <div>Footer</div>;\n}\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport Header from './Header';\nimport MainPage from './MainPage';\nimport Footer from './Footer';\n\nfunction App() {\n    const [dayOrNight, setDayOrNight] = useState();\n\n    // const backgroundChange = (currenttime, sunrise, sunset) => {\n    //     if (currenttime - sunrise > 0 && currenttime - sunset < 0) {\n    //         console.log('daytime');\n    //         setDayOrNight('day');\n    //     } else {\n    //         console.log('nighttime');\n    //         setDayOrNight('night');\n    //     }\n    // };\n\n    const backgroundChangeforHourly = (icon) => {\n        if (/d$/.test(icon)) {\n            console.log('daytime');\n            setDayOrNight('day');\n        } else {\n            console.log('nighttime');\n            setDayOrNight('night');\n        }\n    };\n\n    const backgroundChange = (sunrise, sunset) => {\n        const currenttime = new Date().getTime() / 1000;\n        if (currenttime - sunrise > 0 && currenttime - sunset < 0) {\n            console.log('daytime');\n            setDayOrNight('day');\n        } else {\n            console.log('nighttime');\n            setDayOrNight('night');\n        }\n        console.log(currenttime, sunrise, sunset);\n    };\n\n    return (\n        <div\n            className={\n                dayOrNight === 'night'\n                    ? 'bg-nighttime bg-scroll h-full min-h-screen'\n                    : 'bg-daytime bg-scroll h-full min-h-screen'\n            }\n            style={{ backgroundAttachment: 'fixed', backgroundPosition: 'bottom' }}\n        >\n            <Header className={dayOrNight} />\n            <MainPage backgroundChange={backgroundChange} backgroundChangeforHourly={backgroundChangeforHourly} />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}